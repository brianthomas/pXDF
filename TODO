
   TODO: In other words, WHY is this package still ALPHA?!? 


   What is currently NOT implemented in this package, but will be:
   ---------------------------------------------------------------

   - Resolve class_attributes/XMLAttribute differences between perl and Java.
     for example, bring getFormatCommands in FormattedXMLDataIOStyle in line 
     with Java package.

   - blank data not written properly

   - Implement append Array/align axis functionality

   - readId/readIdRef not implemented yet.

   - Unfortunately, binary transfer between machines of differing arch. is
     difficult and not treated well. We need to explore the use of Data::Dumper
     for binary streaming (Storable might be better, but doesnt come as a
     standard module) as suggested by the Portable Perl document.  

   ---------------------------------------------------------------------------
   ** AT This Point the package is a "BETA", but more will need to be done: **
   ---------------------------------------------------------------------------

   - Href stuff only supports files. Need Entity Resolver type behavior ala Java.

   - minor irritation: order of the attributes written (psuedo-)randomly in
     output XML. Need attribOrder as in Java.

   - Output of Notes/location stuff is yucky, need to use locator objects in
     the notes, same as we need to do in Java Package.
     (e.g. Fix XDF::Note setLocation method related stuff).

   - Review Treatment of writing out binary data; its invalid unless sent to a 
     separate file. Do we force this to happen or throw an error? How do we know 
     the right filename if we choose the 'force' option?

   - ID/REF stuff not handled satisfactorily, we are blowing up the storage
     requirements for objects using the deep clone operation. Perhaps we
     need to create a half-way cloning? or store interally (via private field)
     the name of the object we idref'd. Hemm..

   - Review the functionality to attributes on data node.
     -- Href capability (Done for files only)
     -- compression (just stores string, sufficient?)
     -- checksum (just stores string, sufficient?, whats the def?)

   - More effort to bring classes/methods into alignment with the Java package.

   - Need a better treatment of relation node for multiple fields ids. 

   - Although it works, grouping not consistently implemented??
     (fix addParamGroup in Array.pm for example)

   - Identify addtional convience methods that need to be implemented. Any Chaff to be removed?  

   - Problem wi/ External Entities. How to read in DTD to get the
     defaults on the attributes (rather than define them in Objects) 
     (This problem arises fundementally from the Perl XML parser, as parameter and
      'external' entities arent implemented! We either need to make a bug fix to
      the Perl code, or use a different Perl parser..apache has a DOM implementation
      for example). 

   - Reconstitute ValueList from values when writing to XML (hurm.. not likely).

   - Allow user defined handlers for start/end element and char data in XDF::Reader. 

   - Improve the documentation (check spelling! improve descriptions of methods).

   - User evaluation of method calls. Anything that can be improved? Missing 
     "convience" methods? (yes, this should have been done in object construction,
     but alas, we can forsee *everything*). 

   -------------------------------------------------------------------------
   ** At this point we have an stable feature-complete release candidate.
   -------------------------------------------------------------------------

   Future Development Goals?
   -------------------------

   - Move up to the XDF 0.20 DTD standard. A major change in this DTD is the 
     MathML/units treatment.

   - Investigate and implement function nodes (see XDF_sample4.xml for an example).

   - Investigate the 'fields' pragma. Is faster primative-type datastorage possbile 
     under Perl? 

   - Allow handling of large arrays which will swamp the available memory
     (implement something like the Berkely DB module so the XDF object will act
     just like a database :) ).

   - Allow improved efficiency of datacube operations (implement something
     like the PDL module/Math::RealMatrix).

   - Need to implement a shadow array for precision on numbers within the dataCube.
     setData may adjust precision to be *lower* than declared in the relevant
     dataFormat object but may *never* insert a number with *higher* precision than
     currently exists in the dataCube. Need a $array->getPrecision($locator) method
     to identify precision on each cell.

   - Ability to supply application/xdf processing instruction to DOM parser. This should
     allow DOM parser to produce XDF objects from the XDF nodes embedded in a parent
     document (and also pass back a DOM of just the parent nodes).

   - Better control over Internal entities. Right now, XDF parser just replaces every
     thing. We should allow ability NOT to replace and to hang on to the entity list
     (which is printed back out with the XML from an $obj->toXMLFileHandle method call).


